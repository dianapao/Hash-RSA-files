package RSACipher;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.commons.codec.binary.Base64;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author kenic
 */
public class Interfaz_Practica extends javax.swing.JFrame {

    /**
     * Creates new form Interfaz_Practica
     */
    public Interfaz_Practica() {
        initComponents();
    }
    
    RSAFunction chipherRSA = new RSAFunction();
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jcbElegir = new javax.swing.JComboBox<>();
        jlbTexto = new javax.swing.JLabel();
        jbtKey = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabelResultado = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jcbElegir.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sin Seleccionar", "Firma", "Verificacion" }));
        jcbElegir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbElegirActionPerformed(evt);
            }
        });

        jlbTexto.setText("Selecciona Si quieres Cifrar o Descifrar");

        jbtKey.setText("Seleccionar");
        jbtKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtKeyActionPerformed(evt);
            }
        });

        jButton1.setText("Mensaje");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Terminar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addComponent(jlbTexto))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(152, 152, 152)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2)
                            .addComponent(jButton1)
                            .addComponent(jLabelResultado, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(138, 138, 138)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcbElegir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jbtKey))))
                .addContainerGap(123, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jlbTexto)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jcbElegir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(jbtKey)
                .addGap(43, 43, 43)
                .addComponent(jButton1)
                .addGap(47, 47, 47)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelResultado, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                .addGap(6, 6, 6))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    String opcion;
    String texto = "";
    String texto02 = "";
    String llavePublica = "";
    String llavePublica02 = "";
    String llavePrivada = "";
    String llavePrivada02 = "";
    
    private void jcbElegirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbElegirActionPerformed
        // TODO add your handling code here:
        opcion = jcbElegir.getSelectedItem().toString();
        
        if(opcion.equals("Verificacion")){
            jbtKey.setText("Insertar llave pública");
        }else if(opcion.equals("Firma")){
                jbtKey.setText("Insertar llave privada");
            
        }
        
    }//GEN-LAST:event_jcbElegirActionPerformed

    private void jbtKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtKeyActionPerformed
        // TODO add your handling code here:
        
        // Boton Que Nos Permite Seleccionar el Archivo.
       
        JFileChooser fc  = new JFileChooser();
        //Direccion por defecto
        fc.setCurrentDirectory(new File("C:\\Users\\Diana Paola\\Downloads\\practica hash\\HashRSA-main"));
        //Filtro
        FileNameExtensionFilter filtroMensaje = new FileNameExtensionFilter("Mensaje/Archivo","txt");
        fc.setFileFilter(filtroMensaje);
        
        fc.showOpenDialog(null);
        
        File archivo = fc.getSelectedFile();
        
        
        
        try {
            FileReader fr = new FileReader(archivo);
            BufferedReader br = new BufferedReader(fr); 
            
            String linea = "";
            
            while(((linea = br.readLine())) != null){
                llavePublica+=linea+"\n";
                llavePrivada+=linea+"\n";
            }
            
            //jtxaArchivoObtenido.setText(texto);
            JOptionPane.showMessageDialog(null, "¡ Archivo Leido Corectamente <3 !");
            
        } catch (Exception e) {
        
        }
        
        if(opcion.equals("Verificacion")){
            //llavePublica=texto;
            llavePrivada="";
            System.out.println(llavePublica);
            System.out.println("Longitud: " + llavePublica.length());
            
            llavePublica02=llavePublica.substring(0, (llavePublica.length()-1) );
            
            System.out.println(llavePublica02);
            chipherRSA.setPublicKey(llavePublica02);
        
            System.out.println("Longitud: " + llavePublica02.length());
            
        }else if(opcion.equals("Firma")){
            jbtKey.setText("Insertar llave privada");
            llavePublica="";
            //llavePrivada=texto;
            System.out.println(llavePrivada);
            System.out.println("Longitud: " + llavePrivada.length());
            
            llavePrivada02=llavePrivada.substring(0, (llavePrivada.length()-1) );
            
            System.out.println(llavePrivada02);
            chipherRSA.setPrivateKey(llavePrivada02);
        
            System.out.println("Longitud: " + llavePrivada02.length());
        }
        
        
        System.out.println(texto02);
        
        System.out.println("Longitud ***: " + texto02.length());
    }//GEN-LAST:event_jbtKeyActionPerformed

    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        // Boton Que Nos Permite Seleccionar el Archivo.
       
        JFileChooser fc  = new JFileChooser();
        //Direccion por defecto
        fc.setCurrentDirectory(new File("C:\\Users\\Diana Paola\\Downloads\\practica hash\\HashRSA-main"));
        //Filtro
        FileNameExtensionFilter filtroMensaje = new FileNameExtensionFilter("Mensaje/Archivo","txt");
        fc.setFileFilter(filtroMensaje);
        
        fc.showOpenDialog(null);
        
        File archivo = fc.getSelectedFile();
        
        
        
        try {
            FileReader fr = new FileReader(archivo);
            BufferedReader br = new BufferedReader(fr); 
            
            String linea = "";
            
            while(((linea = br.readLine())) != null){
                texto+=linea+"\n";
            }
            
            //jtxaArchivoObtenido.setText(texto);
            JOptionPane.showMessageDialog(null, "¡ Archivo Leido Corectamente <3 !");
            
        } catch (Exception e) {
        
        }
        
        System.out.println(texto);
        texto02=texto.substring(0, (texto.length()-1) );
        
        System.out.println("Longitud: " + texto.length());
        
        System.out.println(texto02); 
        
        System.out.println("Longitud: " + texto02.length());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if(opcion.equals("Verificacion")){
            
            //jbtKey.setText("Insertar llave pública");
            
            String parte01, parte02;
            parte01 = texto02.substring(0,(texto02.length()-40));
            parte02 = texto02.substring((texto02.length()-40),texto02.length());
            //texto02=texto.substring(0, (texto.length()-1) );
            
            System.out.println("Parte 01 \n" + parte01);
            System.out.println("Llave Publicas Utilziar \n" + llavePublica02);
            System.out.println("Tamanio Llave Publicas Utilizar \n" + llavePublica02.length());
            
            System.out.println("Parte 02 \n" + parte02);
            
            PublicKey publicKey;
            KeyFactory kf;
            
            //System.out.println("\n\n\n\n\n\n\n\n ****************** \n\n\n\n\n\n\n\n\n\n");
            
            String decryptedString = "";
            try {
                System.out.println("Mnsg a descrifrar: " + parte01);
                decryptedString = chipherRSA.decrypt(parte01, llavePublica02); 
                
                System.out.println("MENSAJE DESCIFRADO: " + decryptedString);
                System.out.println("Digesto originaaal: " + parte02);
                if(decryptedString.equals(parte02)){
                    JOptionPane.showMessageDialog(null, "Se cumple autenticación, no repudio e integridad de los datos");
                }else{
                    //jLabelResultado.setText("El mensaje está modificado :c ");
                   JOptionPane.showInputDialog (null, "El mensaje está modificado :c");

                }
                //System.out.println("msg descifrado : " + decryptedString);
            } catch (IllegalBlockSizeException ex) {
                System.out.println("ALGUIEN MODIFICO EL MENSAJE!!!!");
                JOptionPane.showInputDialog (null, "CUIDADO. FIRMA INVALIDA!!!");
                //Logger.getLogger(Interfaz_Practica.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvalidKeyException ex) {
                //Logger.getLogger(Interfaz_Practica.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println("ALGUIEN MODIFICO EL MENSAJE!!!!");
                JOptionPane.showMessageDialog(null, "CUIDADO. FIRMA INVALIDA!!!");
            } catch (BadPaddingException ex) {
                //Logger.getLogger(Interfaz_Practica.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println("ALGUIEN MODIFICO EL MENSAJE!!!!");
                JOptionPane.showMessageDialog (null, "CUIDADO. FIRMA INVALIDA!!!");
            } catch (NoSuchAlgorithmException ex) {
                //Logger.getLogger(Interfaz_Practica.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println("ALGUIEN MODIFICO EL MENSAJE!!!!");
                JOptionPane.showMessageDialog (null, "CUIDADO. FIRMA INVALIDA!!!");
            } catch (NoSuchPaddingException ex) {
                //Logger.getLogger(Interfaz_Practica.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println("ALGUIEN MODIFICO EL MENSAJE!!!!");
                JOptionPane.showMessageDialog (null, "CUIDADO. FIRMA INVALIDA!!!");
            } catch (InvalidKeySpecException ex) {
                //Logger.getLogger(Interfaz_Practica.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println("ALGUIEN MODIFICO EL MENSAJE!!!!");
                JOptionPane.showMessageDialog(null, "CUIDADO. FIRMA INVALIDA!!!");
            }
            
            System.out.println("Terminamos");
            /*try {
                
                kf = KeyFactory.getInstance("RSA");
                
                byte[] encodedPb = Base64.decodeBase64(llavePublica02);
                X509EncodedKeySpec keySpecPb = new X509EncodedKeySpec(encodedPb);
                publicKey = kf.generatePublic(keySpecPb);
                
                Cipher cipher;
                
                byte[] txt02;
                
                cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
                cipher.init(Cipher.DECRYPT_MODE, publicKey);
                System.out.println("JOJOJOJOJOO");
                txt02 = cipher.doFinal(parte01.getBytes());
                System.out.println("HAHAHAHAHAHA");
                System.out.println("\n\nDecrypted message888: \n" + new String(txt02));
                System.out.println("Digesto \n" +parte02);
                
            } catch (Exception e) {
            }*/
               
            
            
            
        }else if(opcion.equals("Firma")){
            jbtKey.setText("Insertar llave privada");

            String sha1 = "";
		
            // With the java libraries
            try {
                MessageDigest digest = MessageDigest.getInstance("SHA-1");
                digest.reset();
                digest.update(texto02.getBytes("utf8"));        
                sha1 = String.format("%040x", new BigInteger(1, digest.digest()));
		
            } catch (Exception e){
		e.printStackTrace();
            }

            System.out.println( "Primer DigestoThe sha1 of \""+ texto02 + "\" is:");
            System.out.println( sha1 );
            System.out.println();
            
            
            PrivateKey privateKey;
            PublicKey publicKey;
            KeyFactory kf;
            byte[] txt = sha1.getBytes();
            
            String mensaje_cifrado="";
            try {
                String encryptedString = java.util.Base64.getEncoder().encodeToString(chipherRSA.encrypt(sha1, llavePrivada02));
                //mensaje_cifrado = java.util.Base64.getEncoder().encodeToString(chipherRSA.encrypt(sha1, llavePrivada02));
                System.out.println("MENSAJE CIFRADO: \n" + encryptedString);
                mensaje_cifrado = encryptedString;
            } catch (BadPaddingException ex) {
                Logger.getLogger(Interfaz_Practica.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalBlockSizeException ex) {
                Logger.getLogger(Interfaz_Practica.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvalidKeyException ex) {
                Logger.getLogger(Interfaz_Practica.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchPaddingException ex) {
                Logger.getLogger(Interfaz_Practica.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchAlgorithmException ex) {
                Logger.getLogger(Interfaz_Practica.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvalidKeySpecException ex) {
                Logger.getLogger(Interfaz_Practica.class.getName()).log(Level.SEVERE, null, ex);
            }
            /*try {
                kf = KeyFactory.getInstance("RSA");
                
                byte[] encodedPv = Base64.decodeBase64(llavePrivada);
                PKCS8EncodedKeySpec keySpecPv = new PKCS8EncodedKeySpec(encodedPv);
                privateKey = kf.generatePrivate(keySpecPv);
                
                
                
                Cipher cipher;
                cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
                cipher.init(Cipher.ENCRYPT_MODE, privateKey);
                txt = cipher.doFinal(txt); // texto ya cifrado
                System.out.println("Encrypted message: " + new String(txt));
                
                
                byte[] encodedPb = Base64.decodeBase64(llavePublica);
                X509EncodedKeySpec keySpecPb = new X509EncodedKeySpec(encodedPb);
                publicKey = kf.generatePublic(keySpecPb);
                
                byte[] txt02;
                
                cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
                cipher.init(Cipher.DECRYPT_MODE, publicKey);
                txt02 = cipher.doFinal(txt);
                System.out.println("Decrypted message: " + new String(txt02));
                
                
            } catch (Exception e) {
            }*/
            
            //String guardarTexto= (new String(txt)) + sha1;
            String guardarTexto = mensaje_cifrado + sha1;
            
            System.out.println("\n\nTexto: \n " + guardarTexto);
            
            
            //Creacion Del Archivo Cifrado en texto plano (Fichero).
            
            File archivoCifrado = new File("Firma.txt");
            
            try{
                //Creamos el Archivo
                archivoCifrado.createNewFile();
                
                FileWriter fw = new FileWriter(archivoCifrado);
                BufferedWriter bw = new BufferedWriter(fw);
                PrintWriter pw = new PrintWriter(bw);
                
                //Escribimos el Mensaje Cifrado
                pw.write(guardarTexto);
                
                //Cerramos los objetos del Archivo.
                pw.close();
                bw.close();
                
            }catch(IOException ex){
                ex.printStackTrace();
            }
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz_Practica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz_Practica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz_Practica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz_Practica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz_Practica().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelResultado;
    private javax.swing.JButton jbtKey;
    private javax.swing.JComboBox<String> jcbElegir;
    private javax.swing.JLabel jlbTexto;
    // End of variables declaration//GEN-END:variables
}
